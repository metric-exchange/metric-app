<token-selector>

    <div id="token-selector">
        <div class="wrapper">
            <div class="close"><img src={ config.closeImage } onclick={ this.cleanUpAndClose } alt={ this.i18next.t('token_selector.close.alt') } ></div>
            <input id="token-selector-input-text" type="text" placeholder={ this.i18next.t('token_selector.input.message') } oninput={ filterTokenSearch }>
        </div>
        <div class="tokens">
            <table>
                <tr id="token-{ token.symbol }" each={ token in state.sortedTokens } key={ token.symbol } onclick={ fetchTokenInfo }>
                    <td class="img"><img src="{ fetchTokenLogoURI(token) }" alt=" " onerror={ changeLogoToDefault }></td>
                    <td class="symbol">{ token.symbol }</td>
                    <td class="balance">{ safeRound(token.balance) }</td>
                </tr>
            </table>
        </div>
    </div>

    <script>

        import Image from './close.svg'
        import UnknownTokenLightImage from './unknown-token-light.svg'
        import UnknownTokenDarkImage from './unknown-token-dark.svg'
        import './token_selector.css'
        import {
            findOrAddTokenWithAddress, registerForTokenBalancesUpdate,
            registerForTokenListUpdate,
            tokensList
        } from "../../common/tokens/token_fetch";
        import {registerForThemeUpdates} from "../../common/theme_manager";
        import { BigNumber } from '@0x/utils'

        export default {
            config: {
                closeImage: Image
            },
            state: {
                sortedTokens: [],
                addressRegEx: new RegExp("0x[0-9a-zA-Z]{40}")
            },
            safeRound(n) {
                return new BigNumber(n).toFixed(4, BigNumber.ROUND_DOWN)
            },
            async onBeforeMount() {
                await this.buildSortedTokenList(null)
            },
            onMounted() {
                document.addEventListener('click', this.listenToSelectorCloseClick)
                registerForThemeUpdates(this)
                registerForTokenListUpdate(this)
                registerForTokenBalancesUpdate(this)
                this.updateTheme()
            },
            async onTokenListUpdate() {
                await this.filterTokenSearch()
                this.update()
            },
            async onTokenBalancesUpdate() {
                await this.onTokenListUpdate()
            },
            listenToSelectorCloseClick(e) {
                let selector = document.getElementById('token-selector');
                let swap = document.getElementById('swap-form');

                if (selector !== null && !selector.contains(e.target) &&
                    swap !== null && !swap.contains(e.target)) {
                    this.cleanUpAndClose();
                }
            },
            cleanUpAndClose() {
                this.props.closeTokenSelector()
                this.clearFilter()
            },
            clearFilter() {
                this.$("#token-selector input").value = null
                this.filterTokenSearch()
                this.update()
            },
            fetchTokenInfo(e) {
                let symbol = e.target.parentElement.cells[1].textContent

                let tokenData = tokensList().find(t => t.symbol === symbol)

                this.props.selectToken(tokenData)
                this.clearFilter()
            },
            async filterTokenSearch() {
                let filter = null
                let input = this.$("#token-selector input")

                if (input !== undefined) {
                    filter = this.$("#token-selector input").value.toLowerCase()
                }

                if (filter !== null && filter.length === 0) {
                    filter = null
                }
                await this.buildSortedTokenList(filter)
                this.filterTokens(filter)
            },
            async buildSortedTokenList(filter) {
                if (filter !== null &&
                    filter.match(this.state.addressRegEx))
                {
                    await findOrAddTokenWithAddress(filter)
                }
                this.state.sortedTokens = this.sortTokens(tokensList().filter(t => !t.disabled), filter)
            },
            filterTokens(filter) {
                let that = this
                let tokens =
                    this.state.sortedTokens
                        .filter(function(x) {
                            return filter == null ||
                                x.symbol.toLowerCase().includes(filter) ||
                                (filter.match(that.state.addressRegEx) && x.address.toLowerCase().includes(filter))
                        })

                tokensList().forEach(t => {
                    let tr = document.getElementById(`token-${t.symbol}`)
                    if (tr !== null) {
                        if (tokens.find(tt => tt.symbol === t.symbol) === undefined) {
                            tr.style.display = 'none'
                        } else {
                            tr.style.display = null
                        }
                    }
                })
            },
            sortTokens(tokens, value) {
                let that = this
                return tokens.sort(function(a, b) {
                    if (a.balance > 0 || b.balance > 0) {
                        return b.balance - a.balance
                    } else if (value === null) {
                        return a.symbol.localeCompare(b.symbol, 'en', { sensitivity: 'base' })
                    } else if (value.match(that.state.addressRegEx)) {
                        return a.address.localeCompare(value, 'en', { sensitivity: 'base' })
                    } else {
                        return a.symbol.localeCompare(value, 'en', { sensitivity: 'base' })
                    }
                })
            },
            fetchTokenLogoURI(token) {
                if (token.logoURI !== undefined) {
                    return token.logoURI
                } else {
                    return this.defaultTokenLogo()
                }
            },
            defaultTokenLogo() {
                if (this.isLightThemeSet()) {
                    return UnknownTokenLightImage
                } else {
                    return UnknownTokenDarkImage
                }
            },
            changeLogoToDefault(e) {
                e.target.setAttribute("src", this.defaultTokenLogo())
                e.target.classList.add("token-with-default-logo")
            },
            updateTheme() {
                let tokensWithNoLogo = document.getElementsByClassName("token-with-default-logo")
                for (let i = 0; i < tokensWithNoLogo.length; i++) {
                    tokensWithNoLogo[i].setAttribute("src", this.defaultTokenLogo())
                }
            }
        }

    </script>

</token-selector>
