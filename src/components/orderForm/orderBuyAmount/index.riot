<order-buy-amount>

    <div class="order-line exchange-amount">
        <div class="input-sticky-placeholder" if={ !isNaN(props.orderFactory.order.buyAmount.value) && !props.orderFactory.order.isHidingGameOrder()}>
            { this.i18next.t('order.you_get') } { this.i18next.t('order.with_fee', {amount: formattedFeeAmount()}) }
        </div>
        <div class="input-sticky-placeholder" if={ !isNaN(props.orderFactory.order.buyAmount.value) && props.orderFactory.order.isHidingGameOrder()}>
            { this.i18next.t('order.you_get') }
        </div>
        <div class="input-sticky-placeholder" if={ isNaN(props.orderFactory.order.buyAmount.value) }>
        </div>
        <div></div>
        <div class="input-token-balance">{ this.formatNumber(props.orderFactory.order.buyToken.balance.toNumber()) }</div>
        <div class="order-input">
            <input type="number" id="order-amount-output" oninput={ updateAmount } placeholder="{ this.i18next.t('order.you_get') }" step="any"/>
        </div>
        <div class="order-input">
            <div id="order-switch" class="order-line switch-button" onclick={ switchDirection }>
                <svg width="35" height="35" viewBox="0 0 35 35" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <circle cx="17.5" cy="17.5" r="17.5" transform="rotate(-90 17.5 17.5)" fill="#262626"/>
                    <path d="M14.5833 12.8333V22.1667L12.8333 20.4167" stroke="#888888" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M20.4167 22.1518L20.4167 12.8316L22.1667 14.5833" stroke="#888888" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
            </div>
        </div>
        <div class="order-input">
            <div class="token-selector-button" onclick={ props.openTokenSelector }>
                <div>{ props.orderFactory.order.buyToken.symbol }</div>
                <svg width="8" height="10" viewBox="0 0 289 142" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M8 8L147 134L281 8" stroke="black" stroke-width="30" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
            </div>
        </div>
    </div>

    <script>

        import {
            OrderEventActions,
            OrderEventProperties,
            OrderEventSource
        } from "../../../common/order/OrderEventSource";
        import {registerForTokenBalancesUpdate} from "../../../common/tokens/token_fetch";
        import {BigNumber} from "@0x/utils";

        export default {
            config: {
                event: new OrderEventSource(OrderEventProperties.BuyAmount, OrderEventActions.Input)
            },
            onMounted() {
                registerForTokenBalancesUpdate(this)
                this.props.orderFactory.order.buyAmount.observe(this, 'onAmountChange')
                this.props.orderFactory.order.observeTokenChanges(this, 'update')
            },
            onTokenBalancesUpdate(token) {
                if (token.address === this.props.orderFactory.order.buyToken.address) {
                    this.update()
                }
            },
            onAmountChange(source) {
                if (source.property !== this.config.event.property || source.action !== this.config.event.action) {
                    let input = document.getElementById("order-amount-output")
                    if (input !== null) {
                        input.value =
                            this.props.orderFactory.order.buyAmount.value
                                .decimalPlaces(this.props.orderFactory.order.buyToken.decimals)
                                .toString()
                        this.update()
                    }
                }
            },
            switchDirection(e) {
                this.props.orderFactory.order.switchTokens()
                document.getElementById("order-switch").classList.toggle("transition-half-rotate")
                this.update()
            },
            updateAmount(e) {
                this.props.orderFactory.order.buyAmount.set(this.config.event, new BigNumber(e.target.value))
                this.update()
            },
            formattedFeeAmount() {
                return this.formatNumber(
                    this.props.orderFactory.order.sellPrice
                        .buyFeeAmountFor(this.props.orderFactory.order.buyAmount.value)
                        .toNumber()
                )
            }
        }

    </script>

</order-buy-amount>
