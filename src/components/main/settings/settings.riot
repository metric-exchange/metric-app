<settings>

    <div class="identicon">
        <a if={ this.isWalletConnected() }
           class="identicon-address"
           href="https://etherscan.io/address/{ this.accountAddress() }"
           target="_blank">
            <span>{ state.obfuscatedAccount }</span>
        </a>
        <a if={ !this.isWalletConnected() }
           class="identicon-address"
           onclick={ this.connectWallet }>
            <span>{ this.i18next.t('wallet.connect_wallet') }</span>
        </a>
        <img    onclick={ toggleDropDown }
                id="identicon-image"
                class="identicon-image"
                src={ state.blocky }
                height="25"
                width="25"
                alt="blocky"
        />
    </div>

    <div style={ isClicked() ? "display:block" : 'display:none'} >
        <div class="dropdown-content" id="settings-dropdown">
            <div if={ this.isWalletConnected() }
                 class="wallet-switch"
                 onclick={ this.switchWallet }
            >
                { this.i18next.t('wallet.change_wallet') }
            </div>
            <language-selector/>
            <theme-switch/>
        </div>
    </div>

    <script>
        import './settings.css'
        import ThemeSwitch from '../theme-switch/theme-switch.riot'
        import LanguageSelector from '../language_selector/language-selector.riot'
        import {accountAddress, registerForWalletChanges} from "../../../common/wallet/wallet_manager";
        import makeBlockie from 'ethereum-blockies-base64';

        export default {
            components: {
                ThemeSwitch,
                LanguageSelector
            },
            state: {
                icon: Image,
                dropDownClicked: false,
                address: "0x0000000000000000000000000000000000000000",
                obfuscatedAccount: null,
                blocky: null
            },
            onBeforeUpdate() {
                this.handleAccounts()
            },
            onWalletChanges() {
                this.handleAccounts()
                this.update()
            },
            onBeforeMount() {
                this.handleAccounts()
            },
            onMounted() {
                registerForWalletChanges(this)
                document.addEventListener('click', function (e) {
                    var dropdown = document.getElementById('settings-dropdown');
                    var icon = document.getElementById('identicon-image');
                    
                    if (!icon.contains(e.target) && this.isClicked() && !dropdown.contains(e.target)) {
                        this.toggleDropDown();
                    }
                }.bind(this));
            },
            isClicked() {
                return this.state.dropDownClicked
            },
            toggleDropDown() {
                this.state.dropDownClicked = !this.state.dropDownClicked
                this.update()
            },
            handleAccounts() {

                if (accountAddress() !== undefined) {
                    this.state.address = accountAddress()
                } else {
                    this.state.address = "0x0000000000000000000000000000000000000000"
                }

                this.state.obfuscatedAccount = this.state.address.substr(0, 8) + '...' + this.state.address.substr(38, 40)
                this.state.blocky = makeBlockie(this.state.address)
            }
        }
    </script>

</settings>
