
<order-line>

    <div id="{ props.order.metaData.orderHash }"
         class="my-orders my-orders-line"
         if={ state.makerToken !== undefined && state.takerToken !== undefined }
         onclick={ handleClick }
    >
        <div class="my-order-volume">
            <div class="my-order-amount sell-amount">
                <div>{ this.formatNumber(makerTotalAmount(props.order).toNumber()) }</div>
                <div>{ state.makerToken.symbol }</div>
            </div>
            <div>&#8594;</div>
            <div class="my-order-amount buy-amount">
                <di>{ this.formatNumber(takerAmount(props.order).toNumber()) }</di>
                <div>{ state.takerToken.symbol }</div>
            </div>
        </div>
        <div class="my-order-fill">{ this.i18next.t('my_order_list.header.filled') } { this.formatNumber(filledTakerPercentage(props.order).toNumber()) }%</div>
        <div class="my-order-expiry">{ this.i18next.t('my_order_list.header.expires_in') } { getDateDiff(props.order) }</div>
        <div class="my-order-price">{ this.i18next.t('order.price') } { this.formatNumber(orderPrice(props.order).toNumber()) }</div>
    </div>

    <script>
        import './index.css'
        import {tokensList} from "../../../common/tokens/token_fetch";
        import moment from 'moment';
        import Image from '../../orderForm/tokenSelector/close.svg'
        import CheckBox from '../../checkBox/index.riot'
        import {BigNumber} from "@0x/utils";

        export default {
            components: {
                CheckBox
            },
            config: {
              closeImage: Image
            },
            state: {
                makerToken: undefined,
                takerToken: undefined,
                selected: false
            },
            onBeforeMount() {
                this.initTokens()
            },
            onBeforeUpdate() {
                this.initTokens()

                let orderElement = document.getElementById(this.props.order.metaData.orderHash)
                if (orderElement !== null) {
                    this.state.selected = false
                    orderElement.classList.remove("selected-order")
                    if (this.props.selectedOrders.find(hash => hash === this.props.order.metaData.orderHash)) {
                        orderElement.classList.add("selected-order")
                        this.state.selected = true
                    }
                }
            },
            initTokens() {
                if (this.props.order.version === 3) {
                    let prefixLen = "0xf47261b0000000000000000000000000".length
                    let makerAddress = `0x${this.props.order.order.makerAssetData.substr(prefixLen)}`.toLowerCase()
                    let takerAddress = `0x${this.props.order.order.takerAssetData.substr(prefixLen)}`.toLowerCase()
                    this.state.makerToken = tokensList().find(t => t.address.toLowerCase() === makerAddress)
                    this.state.takerToken = tokensList().find(t => t.address.toLowerCase() === takerAddress)
                } else {
                    this.state.makerToken = tokensList().find(t => t.address.toLowerCase() === this.props.order.order.makerToken)
                    this.state.takerToken = tokensList().find(t => t.address.toLowerCase() === this.props.order.order.takerToken)
                }
            },
            makerTotalAmount(order) {
                if (order.version === 3) {
                    return order.order.makerAssetAmount.plus(order.order.makerFee)
                        .dividedBy(10**this.state.makerToken.decimals)
                } else {
                    return new BigNumber(order.order.makerAmount)
                        .dividedBy(10**this.state.makerToken.decimals)
                }
            },
            makerAmount(order) {
                if (order.version === 3) {
                    return order.order.makerAssetAmount
                        .dividedBy(10**this.state.makerToken.decimals)
                } else {
                    return new BigNumber(order.order.makerAmount)
                        .dividedBy(10**this.state.makerToken.decimals)
                }
            },
            takerAmount(order) {
                if (order.version === 3) {
                    return order.order.takerAssetAmount
                        .dividedBy(10**this.state.takerToken.decimals)
                } else {
                    return new BigNumber(order.order.takerAmount)
                        .dividedBy(10**this.state.takerToken.decimals)
                }
            },
            filledTakerPercentage(order) {
                if (order.version === 3) {
                    let remaining = parseInt(order.metaData.remainingFillableTakerAssetAmount)
                    return order.order.takerAssetAmount
                        .minus(remaining)
                        .multipliedBy(100)
                        .dividedBy(order.order.takerAssetAmount)
                } else {
                    return new BigNumber(order.metaData.filledAmount_takerToken)
                                    .dividedBy(order.order.takerAssetAmount)
                }
            },
            orderPrice(order) {
                return this.takerAmount(order).dividedBy(this.makerAmount(order))
            },
            getDateDiff(order) {
                let timestampSeconds = 0
                if (order.version === 3) {
                    timestampSeconds = order.order.expirationTimeSeconds
                } else {
                    timestampSeconds = order.order.expiry
                }
                let langId = this.i18next.language
                let lang = this.supportedLanguages[langId]
                moment.locale(langId, { relativeTime: lang.translation.relativeTime});
                return moment(timestampSeconds * 1000).fromNow()
            },
            handleClick(e) {
                this.state.selected = !this.state.selected
                document.getElementById(this.props.order.metaData.orderHash).classList.toggle("selected-order")
                this.props.toggleOrderSelection(this.props.order)
            }
        }
    </script>

</order-line>


