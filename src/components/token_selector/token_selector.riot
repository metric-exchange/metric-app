<token-selector>

    <div id="token-selector">
        <div class="close">
            <img
                    src={ config.closeImage }
                    width="15"
                    height="15"
                    onclick={ this.cleanUpAndClose }
                    alt={ this.i18next.t('token_selector.close.alt') } />
        </div>
        <input id="token-selector-input-text" type="text" placeholder={ this.i18next.t('token_selector.input.message') } oninput={ filterTokenSearch }>
        <div class="tokens">
            <token-selection
                each={ token in state.sortedTokens }
                token={ token }
                fetch-token-info={ (e) => fetchTokenInfo(token) }
            />
        </div>
    </div>

    <script>

        import Image from './close.svg'
        import './token_selector.css'
        import {
            fetchTokensInfo,
            findOrAddTokenWithAddress, registerForTokenBalancesUpdate,
            registerForTokenListUpdate, resetTokensInfo,
            tokensList
        } from "../../common/tokens/token_fetch";
        import {accountAddress, isWalletConnected, registerForWalletChanges} from "../../common/wallet/wallet_manager";
        import TokenSelection from './tokenSelection/tokenSelection.riot'

        export default {
            components: {
              TokenSelection
            },
            config: {
                closeImage: Image
            },
            state: {
                sortedTokens: [],
                addressRegEx: new RegExp("0x[0-9a-zA-Z]{40}")
            },
            async onBeforeMount() {
                await this.buildSortedTokenList(null)
            },
            onMounted() {
                document.addEventListener('click', this.listenToSelectorCloseClick)
                registerForTokenListUpdate(this)
                registerForTokenBalancesUpdate(this)
                registerForWalletChanges(this)
                if (isWalletConnected()) {
                    fetchTokensInfo(accountAddress())
                }
            },
            onWalletChanges() {
                resetTokensInfo()
                if (isWalletConnected()) {
                    fetchTokensInfo(accountAddress())
                }
                this.update()
            },
            async onTokenListUpdate() {
                await this.filterTokenSearch()
                this.update()
            },
            async onTokenBalancesUpdate() {
                await this.onTokenListUpdate()
            },
            listenToSelectorCloseClick(e) {
                let selector = document.getElementById('token-selector');
                let swap = document.getElementById('swap-form');

                if (selector !== null && !selector.contains(e.target) &&
                    swap !== null && !swap.contains(e.target)) {
                    this.cleanUpAndClose();
                }
            },
            cleanUpAndClose() {
                this.props.closeTokenSelector()
                this.clearFilter()
            },
            clearFilter() {
                this.$("#token-selector input").value = null
                this.filterTokenSearch()
                this.update()
            },
            fetchTokenInfo(token) {
                this.props.selectToken(token)
                this.clearFilter()
            },
            async filterTokenSearch() {
                let filter = this.extractFilter()
                await this.buildSortedTokenList(filter)
                this.filterTokens(filter)
            },
            extractFilter() {
                let filter = null
                let input = this.$("#token-selector input")

                if (input !== undefined) {
                    filter = this.$("#token-selector input").value.toLowerCase()
                }

                if (filter !== null && filter.length === 0) {
                    filter = null
                }
                return filter
            },
            async buildSortedTokenList(filter) {
                if (filter !== null &&
                    filter.match(this.state.addressRegEx))
                {
                    await findOrAddTokenWithAddress(filter)
                }
                this.state.sortedTokens = this.sortTokens(tokensList().filter(t => !t.disabled), filter)
            },
            filterTokens(filter) {
                let that = this
                let tokens =
                    this.state.sortedTokens
                        .filter(function(x) {
                            return filter == null ||
                                x.symbol.toLowerCase().startsWith(filter) ||
                                (filter.match(that.state.addressRegEx) && x.address.toLowerCase().startsWith(filter))
                        })

                tokensList().forEach(t => {
                    let tr = document.getElementById(t.address.toLowerCase())
                    if (tr !== null) {
                        if (tokens.find(tt => tt.address.toLowerCase() === t.address.toLowerCase()) === undefined) {
                            tr.style.display = 'none'
                        } else {
                            tr.style.display = null
                        }
                    }
                })
            },
            sortTokens(tokens, value) {
                let that = this
                return tokens.sort(function(a, b) {
                    if (a.balance > 0 || b.balance > 0) {
                        return b.balance - a.balance
                    } else if (value === null) {
                        return a.symbol.localeCompare(b.symbol, 'en', { sensitivity: 'base' })
                    } else if (value.match(that.state.addressRegEx)) {
                        return a.address.localeCompare(value, 'en', { sensitivity: 'base' })
                    } else {
                        return a.symbol.localeCompare(value, 'en', { sensitivity: 'base' })
                    }
                })
            }
        }

    </script>

</token-selector>
