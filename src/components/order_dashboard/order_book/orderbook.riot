<order-book>
    <div class="order-book-body">
        <div class="order-book-title">{ this.i18next.t('order_book.title') }</div>
        <div class="order-book-content">
            <loader if={ state.isLoadingOrders }/>
            <div class="order-book-columns orders-header" if={ !state.isLoadingOrders }>
                <div>{ this.i18next.t('order.amount', { token: state.inputToken }) }</div>
                <div>{ this.i18next.t('order.price', { token: priceToken() }) }</div>
                <div>{ this.i18next.t('order.total', { token: state.outputToken }) }</div>
            </div>
            <div id="order-table-canvas" onscroll={ disableScrollToView } if={ !state.isLoadingOrders }>

                <div each={bid in state.bids} class="order order-book-columns" if={ props.isPriceDirectionReverted }>
                    <div class="bid">{ this.formatNumber(bid.volumeTaker) }</div>
                    <div class="order-price" onclick={ (e) => setOrderPrice(bid.price) }>{ bid.price }</div>
                    <div class="ask">{ this.formatNumber(bid.volumeMaker) }</div>
                </div>

                <div each={ask in state.asks} class="order order-book-columns" if={ !props.isPriceDirectionReverted }>
                    <div class="ask">{ this.formatNumber(ask.volumeTaker) }</div>
                    <div class="order-price" onclick={ (e) => setOrderPrice(ask.price) }>{ ask.price }</div>
                    <div class="bid">{ this.formatNumber(ask.volumeMaker) }</div>
                </div>

                <div id="orders-separator" class="order-book-columns" >
                    <div/>
                    <div class="order-price" onclick={ (e) => setOrderPrice(state.midMarketPrice) }>{ state.midMarketPrice }</div>
                    <div/>
                </div>

                <div each={bid in state.bids} class="order order-book-columns" if={ !props.isPriceDirectionReverted }>
                    <div class="bid">{ this.formatNumber(bid.volumeTaker) }</div>
                    <div class="order-price" onclick={ (e) => setOrderPrice(bid.price) }>{ bid.price }</div>
                    <div class="ask">{ this.formatNumber(bid.volumeMaker) }</div>
                </div>

                <div each={ask in state.asks} class="order order-book-columns" if={ props.isPriceDirectionReverted }>
                    <div class="ask">{ this.formatNumber(ask.volumeTaker) }</div>
                    <div class="order-price" onclick={ (e) => setOrderPrice(ask.price) }>{ ask.price }</div>
                    <div class="bid">{ this.formatNumber(ask.volumeMaker) }</div>
                </div>
            </div>
        </div>
    </div>

    <script>
        import './orderbook.css'
        import Loader from '../../loader/loader.riot'

        import {
            getBaseToken,
            getOrderBookAsks,
            getOrderBookBids, getQuoteToken, registerForBaseTokenChange,
            registerForOrderBookUpdateEvents
        } from "../../../common/0x/0x_order_book_proxy";

        import {BigNumber} from '@0x/utils';
        import {getTokenUsdPrice} from "../../../common/tokens/token_price_proxy";
        import {updateOrderPrice} from "../../../common/prices/OrderPriceManager";

        export default {
            components: {
                Loader
            },
            config: {
                displayedDecimalPoints: 3
            },
            state: {
                asks: [],
                bids: [],
                midMarketPrice: null,
                triggerScrollToView: true,
                oldPriceDirectionState: false,
                isLoadingOrders: true,
                midMarketPricePublished: false
            },
            onBeforeMount() {
                this.state.inputToken = getBaseToken()
                this.state.outputToken = getQuoteToken()
            },
            onMounted() {
                registerForBaseTokenChange(this)
                registerForOrderBookUpdateEvents(this)
            },
            onBaseTokenUpdate() {
                this.update({
                    isLoadingOrders: true,
                    midMarketPricePublished: false
                });
            },
            async onOrderBookUpdate() {
                this.state.inputToken = getBaseToken()
                this.state.outputToken = getQuoteToken()

                await this.fetchOrderBook(this.state.inputToken, this.state.outputToken)
            },
            onBeforeUpdate() {
                if (this.oldPriceDirectionState !== this.props.isPriceDirectionReverted) {
                    this.isLoadingOrders = true
                }
            },
            async onUpdated() {
                if (this.oldPriceDirectionState !== this.props.isPriceDirectionReverted) {
                    this.oldPriceDirectionState = this.props.isPriceDirectionReverted
                    this.isLoadingOrders = true
                    await this.fetchOrderBook(this.state.inputToken, this.state.outputToken)
                }
                if (this.state.triggerScrollToView && !this.state.isLoadingOrders) {
                    this.scrollOrderBookIntoView()
                }
            },
            disableScrollToView() {
                this.state.triggerScrollToView = false
            },
            async fetchOrderBook(inputToken, outputToken) {
                if (inputToken !== null && outputToken !== null) {

                    let asks =
                        getOrderBookAsks().map(b => {

                            let makerAmount = b.order.makerAssetAmount.dividedBy(10 ** inputToken.decimals)
                            let takerAmount = b.order.takerAssetAmount.dividedBy(10 ** outputToken.decimals)
                            let remainingTakerAmount = new BigNumber(parseInt(b.metaData.remainingFillableTakerAssetAmount)).dividedBy(10 ** outputToken.decimals)
                            let remainingMakerAmount = makerAmount.multipliedBy(remainingTakerAmount).dividedBy(takerAmount)

                            return {
                                price: this.calculatePrice(takerAmount, makerAmount, BigNumber.ROUND_UP),
                                volumeMaker: remainingTakerAmount,
                                volumeTaker: remainingMakerAmount
                            }
                        })

                    let bids =
                        getOrderBookBids().map(b => {

                            let makerAmount = b.order.makerAssetAmount.dividedBy(10 ** outputToken.decimals)
                            let takerAmount = b.order.takerAssetAmount.dividedBy(10 ** inputToken.decimals)
                            let remainingTakerAmount = new BigNumber(parseInt(b.metaData.remainingFillableTakerAssetAmount)).dividedBy(10 ** inputToken.decimals)
                            let remainingMakerAmount = makerAmount.multipliedBy(remainingTakerAmount).dividedBy(takerAmount)

                            return {
                                price: this.calculatePrice(makerAmount, takerAmount, BigNumber.ROUND_DOWN),
                                volumeMaker: remainingMakerAmount,
                                volumeTaker: remainingTakerAmount
                            }
                        })

                    Array.prototype.sumByPrice = function() {
                        return Object.values(this.reduce(function(groups, item) {
                            const key = item.price
                            groups[key] = groups[key] || {price: key, volumeMaker: 0, volumeTaker: 0}
                            groups[key] = {
                                price:key,
                                volumeMaker: item.volumeMaker.plus(groups[key].volumeMaker),
                                volumeTaker: item.volumeTaker.plus(groups[key].volumeTaker)
                            }
                            return groups
                        }, {}))
                    }

                    this.state.bids =
                        bids
                            .sumByPrice()
                            .sort((a, b) => parseFloat(b.price) - parseFloat(a.price))

                    this.state.asks =
                        asks
                            .sumByPrice()
                            .sort((a, b) => parseFloat(b.price) - parseFloat(a.price))

                    this.state.midMarketPrice = await this.midMarketPrice()
                    if (this.state.midMarketPricePublished === false) {
                        this.setOrderPrice(this.state.midMarketPrice)
                        this.state.midMarketPricePublished = true
                    }
                    await this.update({
                        isLoadingOrders: false,
                        triggerScrollToView: true
                    })

                }
            },

            calculatePrice(quote, base, rounding) {
                if (!this.props.isPriceDirectionReverted) {
                    return quote.dividedBy(base).toFixed(this.config.displayedDecimalPoints, rounding)
                } else {
                    return base.dividedBy(quote).toFixed(this.config.displayedDecimalPoints, 1 - rounding)
                }
            },

            async midMarketPrice() {
                if (this.state.asks.length > 0 && this.state.bids.length > 0) {
                    let bestAsk = this.state.asks.slice(-1)[0]
                    let bestBid = this.state.bids[0]

                    if (this.props.isPriceDirectionReverted) {
                        bestAsk = this.state.asks[0]
                        bestBid = this.state.bids.slice(-1)[0]
                    }

                    return ((parseFloat(bestAsk.price) + parseFloat(bestBid.price)) / 2).toFixed(this.config.displayedDecimalPoints)
                } else {
                    let baseTokenUsdPrice = await getTokenUsdPrice(this.state.inputToken)
                    let quoteTokenUsdPrice = await getTokenUsdPrice(this.state.outputToken)

                    if (baseTokenUsdPrice > 0 && quoteTokenUsdPrice > 0) {
                        return this.formatPrice(baseTokenUsdPrice / quoteTokenUsdPrice)
                    } else {
                        return null
                    }
                }
            },
            scrollOrderBookIntoView() {
                let canvas = document.getElementById("order-table-canvas")
                let separator = document.getElementById("orders-separator")
                if (canvas !== null && separator !== null) {
                    let top =
                        separator.offsetTop -
                        separator.parentNode.offsetTop -
                        canvas.getBoundingClientRect().height / 2 +
                        separator.getBoundingClientRect().height / 2

                    canvas.scroll({ top : top, behavior: "smooth" })
                }
            },
            setOrderPrice(price) {
                updateOrderPrice(parseFloat(price))
            },
            formatPrice(price) {
                let formattedPrice = price
                if (this.props.isPriceDirectionReverted) {
                    formattedPrice = price > 0 ? 1 / price : 0
                }

                return this.formatNumber(formattedPrice)
            },
            priceToken() {
                if (this.props.isPriceDirectionReverted) {
                    return this.state.inputToken
                } else {
                    return this.state.outputToken
                }
            }
        }

    </script>
</order-book>
