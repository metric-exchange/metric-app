<order-price>

    <div class="order-line exchange-price">
        <div class="order-input">
            <div id="price-switch" class="switch-button" onclick={ changePriceDirection } if={ props.orderFactory.order.isLimitOrder() || !props.orderFactory.order.sellPrice.price.value.isNaN() }>
                <svg width="35" height="35" viewBox="0 0 35 35" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <circle cx="17.5" cy="17.5" r="17.5" fill="#262626"/>
                    <path d="M20.5 13L22 14.5" stroke="#888888" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M22 14.5H15.5C14.5 14.5 13 14.5 13 16.5" stroke="#888888" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M14.5 21L13 19.5" stroke="#888888" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M13 19.5L19.5138 19.5C20.5138 19.5 22.0138 19.5 22.0138 17.5" stroke="#888888" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
            </div>
            <div class="max-amount-loader" if={ props.orderFactory.order.isMarketOrder() && props.orderFactory.order.sellPrice.price.value.isNaN() }>
                <loader/>
            </div>
        </div>
        <div class="order-input" if={ props.orderFactory.order.isLimitOrder() }>
            <div class="input-sticky-placeholder" if={ !props.orderFactory.order.sellPrice.price.value.isNaN() }>{ this.i18next.t('order.price_direction', props.orderFactory.order.sellPrice.priceTokens()) }</div>
            <input id="order-price-input"
                   type="number"
                   oninput={ updatePrice }
                   placeholder="{ this.i18next.t('order.price_direction', props.orderFactory.order.sellPrice.priceTokens()) }"
                   step="any"
            />
        </div>
        <div class="order-input" if={ props.orderFactory.order.isMarketOrder() }>
            <div class="input-sticky-placeholder" if={ !props.orderFactory.order.sellPrice.price.value.isNaN() }>{ this.i18next.t('order.price_direction', props.orderFactory.order.sellPrice.priceTokens()) }</div>
            <div id="market-price">
                { props.orderFactory.order.sellPrice.displayPrice().toFixed(4) } {this.priceImpactDisplay()}
            </div>
        </div>
        <order-type-selector
                if={ this.isLimitOrderSupported() }
                order-factory={ props.orderFactory }
                set-market-order-type={ props.setMarketOrderType }
                set-limit-order-type={ props.setLimitOrderType }
        />
    </div>

    <script>

        import {
            OrderEventActions,
            OrderEventProperties,
            OrderEventSource
        } from "../../../common/order/OrderEventSource";
        import Loader from '../../loader/index.riot'
        import OrderTypeSelector from '../orderTypeSelector/index.riot'
        import {BigNumber} from "@0x/utils";

        export default {
            components: {
                Loader,
                OrderTypeSelector
            },
            config: {
                event: new OrderEventSource(OrderEventProperties.Price, OrderEventActions.Input)
            },
            onMounted() {
                this.props.orderFactory.order.sellPrice.price.observe(this, 'onPriceChange')
                this.refreshMarketPrice()
                this.state.synchroHandle = setInterval(async (obj) => { await obj.refreshMarketPrice() }, 30000, this)
            },
            onBeforeUnmount() {
              clearInterval(this.state.synchroHandle)
            },
            onPriceChange(source) {
                if (source.property !== this.config.event.property || source.action !== this.config.event.action) {
                    if (this.props.orderFactory.order.isLimitOrder()) {
                        let input = document.getElementById("order-price-input")
                        if (input !== null) {
                            input.value = this.props.orderFactory.order.sellPrice.displayPrice().toFixed(4)
                            this.update()
                            if (this.props.orderFactory.order.sellPrice.price.value.isNaN()) {
                                this.refreshMarketPrice()
                            }
                        }
                    } else {
                        this.update()
                    }
                }
            },
            updatePrice(e) {
                this.props.orderFactory.order.sellPrice.set(this.config.event, new BigNumber(e.target.value))
                this.update()
            },
            displayPriceImpact() {
                return !this.props.orderFactory.order.buyAmount.value.isNaN() &&
                !this.props.orderFactory.order.sellAmount.value.isNaN()
            },
            changePriceDirection() {
                this.props.orderFactory.order.sellPrice.invert()
                document.getElementById("price-switch").classList.toggle("transition-half-rotate")

                if (this.props.orderFactory.order.isLimitOrder()) {
                    document.getElementById("order-price-input").value =
                        this.props.orderFactory.order.sellPrice.displayPrice().toFixed(4)
                }

                this.update()
            },
            async refreshMarketPrice() {
                if (this.props.orderFactory.order.isMarketOrder() || this.props.orderFactory.order.sellPrice.price.value.isNaN()) {
                    await this.props.orderFactory.order.sellPrice.refreshMarketPrice(
                        this.props.orderFactory.order.sellAmount.value
                    )
                }
            },
            priceImpactDisplay() {
                let priceImpact = this.props.orderFactory.order.sellPrice.priceImpact;
                if (priceImpact === 0) {
                    return '';
                }

                if (!this.displayPriceImpact()) {
                    return ''
                }

                let sign = '-';
                let price = +this.props.orderFactory.order.sellPrice.price.value

                if (this.props.orderFactory.order.sellPrice.inverted) {
                    const basePrice = 1 / (price * ( 1 - priceImpact / 100))
                    sign = '';
                    priceImpact = priceImpact * basePrice * price
                }

                return `(${sign}${priceImpact.toFixed(2)}%)`
            }
        }

    </script>

</order-price>
