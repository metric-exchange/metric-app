<staking>

    <div class="staking-header">
        <div class="trade-list-title">{ this.i18next.t('staking.title').toUpperCase() }</div>
    </div>

    <div class="staking-body">

        <div class="staking-body-section" if={ state.revenueShareContract }>
            <div>{ this.i18next.t('staking.staked') }: { this.formatNumber(state.revenueShareContract.staked) } METRIC</div>
            <div class="staking-share-price"> 1 xMETRIC = { this.formatNumber(state.revenueShareContract.sharePrice) } METRIC</div>

            <token-input
                    eid="xmetric-stake"
                    token-address={ state.revenueShareContract.address }
                    action="leave"
                    disable-input={false}
                    submit={ (a, b) => leaveShare(state.revenueShareContract, a, b) }
            />
        </div>

        <div class="staking-body-section" if={ state.revenueLpShareContract }>
            <div>{ this.i18next.t('staking.staked') }: { this.formatNumber(state.revenueLpShareContract.staked) } {this.metricLpSymbol()}</div>
            <div class="staking-share-price"> 1 x{this.metricLpSymbol()} = { this.formatNumber(state.revenueLpShareContract.sharePrice) } {this.metricLpSymbol()}</div>

            <a class="add-liquidity"
               href="{this.addMetricLiquidityLink()}" target="_blank"
            >
                { this.i18next.t('staking.add_liquidity') }
            </a>

            <token-input
                    eid="xmetric-uni-stake"
                    token-address={ state.revenueLpShareContract.address }
                    action="leave"
                    disable-input={false}
                    submit={ (a, b) => leaveShare(state.revenueLpShareContract, a, b) }
            />

        </div>

    </div>


    <script>
        import {MetricShare} from "../../common/staking/MetricShare";
        import {BigNumber} from "@0x/utils";
        import TokenInput from './tokenInput/index.riot'
        import './index.css'

        export default {
            components: {
                TokenInput
            },
            state: {
                sharePrice: new BigNumber(NaN),
                lpSharePrice: new BigNumber(NaN)
            },
            onBeforeMount() {
                let metricShare = this.metricShareContract()
                let metricLpShare = this.metricShareVaultContract()

                if (metricShare) {
                    this.state.revenueShareContract = new MetricShare(this.metricShareContract(), this.metricToken())
                }

                if (metricLpShare) {
                    this.state.revenueLpShareContract = new MetricShare(this.metricShareVaultContract(), this.metricLpToken())
                }
            },
            async onMounted() {
                await this.updatePrices()
            },
            async updatePrices() {
                await Promise.all([
                    this.state.revenueShareContract?.refreshInfo(),
                    this.state.revenueLpShareContract?.refreshInfo()
                ])
                this.update()
            },
            async enterShare(contract, a, b) {
                await contract.enter(a, b)
                await this.updatePrices()
            },
            async leaveShare(contract, a, b) {
                await contract.leave(a, b)
                await this.updatePrices()
            }
        }
    </script>

</staking>