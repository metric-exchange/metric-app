<order-dashboard>

    <div class="dashboard">

        <div id="bsc-swap-form" class="order-form" if={ this.isConnectedToBscMainNet() }>
            <order-form
                    order-factory={ state.orderFactory }
                    set-market-order-type={ setMarketOrderType }
                    set-limit-order-type={ setLimitOrderType }
            />
        </div>

        <div id="ethereum-order-form" class="order-form" if={ this.isConnectedToEthereumMainNet() }>
            <order-form
                    order-factory={ state.orderFactory }
                    set-market-order-type={ setMarketOrderType }
                    set-limit-order-type={ setLimitOrderType }
            />
        </div>

        <div class="order-book" if={ this.isConnectedToEthereumMainNet() }>
            <order-book order-factory={ state.orderFactory }/>
        </div>

        <div class="trade-list" if={ this.isConnectedToEthereumMainNet() }>
            <trade-list/>
        </div>

        <div class="order-list" if={ this.isConnectedToEthereumMainNet() }>
            <order-list/>
        </div>

    </div>

    <script>

        import './index.css'
        import OrderForm from '../orderForm/index.riot'
        import OrderBook from '../orderBook/index.riot'
        import OrderList from '../orderList/index.riot'
        import TradeList from '../tradeList/index.riot'
        import {registerForTokenListUpdate, resetTokenList} from "../../common/tokens/token_fetch";
        import {SwapOrderFactory} from "../../common/order/SwapOrderFactory";
        import {
            accountAddress,
            isWalletConnected,
            registerForNetworkChanges,
            registerForWalletChanges
        } from "../../common/wallet/wallet_manager";
        import {LimitOrderFactory} from "../../common/order/LimitOrderFactory";
        import {UrlManager} from "../../common/url/UrlManager";
        import {Order} from "../../common/order/Order";
        import {OrderStateManager} from "../../common/order/OrderStateManager";

        export default {
            components: {
                OrderForm,
                OrderBook,
                OrderList,
                TradeList
            },
            state: {
                orderFactory: null,
                urlManager: new UrlManager()
            },
            onBeforeMount() {
                registerForTokenListUpdate(this)
                registerForWalletChanges(this)
                registerForNetworkChanges(this)
            },
            async onTokenListUpdate() {
                let sellToken = await this.state.urlManager.urlSellToken()
                let buyToken = await this.state.urlManager.urlBuyToken()

                console.log('url tokens',sellToken, buyToken)

                this.state.orderFactory =
                    new SwapOrderFactory(
                        new Order(
                            Order.MarketOrderType,
                            sellToken,
                            buyToken
                        ),
                        new OrderStateManager(),
                        accountAddress()
                    )

                this.state.urlManager.updateUrl(sellToken, buyToken)
                await this.state.orderFactory.refreshOrderState()
                this.state.orderFactory.order.observeTokenChanges(this, 'refreshUrl')

                this.update()
            },
            onWalletChanges() {
                if (this.state.orderFactory !== null) {
                    if (isWalletConnected()) {
                        this.state.orderFactory.setAccount(accountAddress())
                    } else {
                        this.state.orderFactory.reset()
                    }
                }
            },
            async onNetworkChanges() {

                let sellToken = UrlManager.defaultSellToken()
                let buyToken = UrlManager.defaultBuyToken()
                this.state.urlManager.updateUrl(sellToken, buyToken)

                console.log('default tokens',sellToken, buyToken)

                await resetTokenList()
            },
            refreshUrl() {
                this.state.urlManager.updateUrl(
                    this.state.orderFactory.order.sellToken,
                    this.state.orderFactory.order.buyToken
                )
            },
            setMarketOrderType() {
                this.state.orderFactory = new SwapOrderFactory(
                    this.state.orderFactory.order,
                    this.state.orderFactory.stateManager,
                    accountAddress()
                )
                this.state.orderFactory.order.type = Order.MarketOrderType
                this.state.orderFactory.clearValues()
                this.update()
            },
            setLimitOrderType() {
                this.state.orderFactory = new LimitOrderFactory(
                    this.state.orderFactory.order,
                    this.state.orderFactory.stateManager,
                    accountAddress()
                )
                this.state.orderFactory.order.type = Order.LimitOrderType
                this.state.orderFactory.clearValues()
                this.update()
            }
        }

    </script>

</order-dashboard>
