<settings>

    <div class="identicon">
        <div id="identicon-image" class="identicon-menu" onclick={ toggleDropDown }>
            <img
                    class="identicon-image"
                    src={ state.blocky }
                    height="25"
                    width="25"
                    alt="blocky"
            />
            <svg width="8" height="10" viewBox="0 0 289 142" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M8 8L147 134L281 8" stroke="black" stroke-width="30" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
            <img class="network-icon" src={ this.networkIcon() } height="15" width="15" if={ this.isWalletConnected() && this.isSupportedNetwork() }/>
        </div>

    </div>

    <div style={ isClicked() ? "display:block" : 'display:none'} >
        <div class="dropdown-content" id="settings-dropdown">
            <div class="settings-section">
                <div if={ this.isWalletConnected() }
                     class="wallet-switch"
                     onclick={ this.switchWallet }
                >
                    { this.i18next.t('wallet.change_wallet') }
                </div>
            </div>
            <div class="settings-section" if={ this.isWalletConnected()  }>
                <chain-selection/>
            </div>
            <div class="settings-section">
                <language-selector/>
            </div>
            <div class="settings-section">
                <theme-switch/>
            </div>
            <div class="settings-section footer-links">
                <div><a href="https://snapshot.org/#/metric-exchange.eth" target="_blank">Voting</a></div>
                <div><a href="https://explorer.0x.org/apps/Metric" target="_blank">Analytics</a></div>
                <div><a href="https://www.coingecko.com/en/coins/metric-exchange" target="_blank">Coingecko</a></div>
                <div><a href="https://twitter.com/metricexchange" target="_blank">Twitter</a></div>
                <div><a href="https://discord.gg/FN3sNSE" target="_blank">Discord</a></div>
                <div><a href="https://t.me/MetricExchange" target="_blank">Telegram</a></div>
                <div><a href="https://github.com/metric-exchange" target="_blank">Github</a></div>

            </div>
        </div>
    </div>

    <script>
        import './index.css'
        import ThemeSwitch from '../themeSwitch/index.riot'
        import LanguageSelector from '../languageSelector/index.riot'
        import ChainSelection from '../chainSelection/index.riot'
        import EthIcon from '../../common/tokens/eth.png'
        import BscIcon from '../../common/tokens/bnb.png'
        import PolygonIcon from '../../common/tokens/polygon.png'
        import AvalancheIcon from '../../common/tokens/avalanche.svg'
        import CeloIcon from '../../common/tokens/celo.png'
        import FantomIcon from '../../common/tokens/fantom.png'
        import OptimismIcon from '../../common/tokens/optimism.png'
        import ArbitrumIcon from '../../common/tokens/arbitrum.png'
        import {
            accountAddress,
            registerForWalletChanges
        } from "../../common/wallet/WalletManager";
        import makeBlockie from 'ethereum-blockies-base64';
        import {
            isConnectedToBscMainNet,
            isConnectedToEthereumMainNet,
            isConnectedToPolygonMainNet,
            isConnectedToAvalancheMainnet,
            isConnectedToCeloMainnet,
            isConnectedToFantomMainnet,
            isConnectedToOptimismMainnet,
            isConnectedToArbitrumMainnet
        } from "../../common/ChainHelpers";

        let DEFAULT_ADDRESS = "0x0000000000000000000000000000000000000000"

        export default {
            components: {
                ThemeSwitch,
                LanguageSelector,
                ChainSelection
            },
            state: {
                icon: Image,
                ethIcon: EthIcon,
                bscIcon: BscIcon,
                polygonIcon: PolygonIcon,
                avalancheIcon: AvalancheIcon,
                celoIcon: CeloIcon,
                fantomIcon: FantomIcon,
                optimismIcon: OptimismIcon,
                arbitrumIcon: ArbitrumIcon,
                dropDownClicked: false,
                address: DEFAULT_ADDRESS,
                blocky: null
            },
            onWalletChanges() {
                this.handleAccounts()
            },
            onMounted() {
                this.handleAccounts()
                registerForWalletChanges(this)
                document.addEventListener('click', function (e) {
                    var dropdown = document.getElementById('settings-dropdown');
                    var icon = document.getElementById('identicon-image');
                    
                    if (!icon.contains(e.target) && this.isClicked() && !dropdown.contains(e.target)) {
                        this.toggleDropDown();
                    }
                }.bind(this));
            },
            isClicked() {
                return this.state.dropDownClicked
            },
            toggleDropDown() {
                this.state.dropDownClicked = !this.state.dropDownClicked
                this.update()
            },
            async handleAccounts() {
                if (accountAddress() !== undefined) {
                    this.state.address = accountAddress()
                } else {
                    this.state.address = DEFAULT_ADDRESS
                }

                this.state.blocky = makeBlockie(this.state.address)
                this.update()
            },
            networkIcon() {
                if (isConnectedToEthereumMainNet()) {
                    return this.state.ethIcon
                }

                if (isConnectedToBscMainNet()) {
                    return this.state.bscIcon
                }

                if (isConnectedToPolygonMainNet()) {
                    return this.state.polygonIcon
                }

                if (isConnectedToAvalancheMainnet()) {
                    return this.state.avalancheIcon
                }

                if (isConnectedToCeloMainnet()) {
                    return this.state.celoIcon
                }

                if (isConnectedToFantomMainnet()) {
                    return this.state.fantomIcon
                }

                if (isConnectedToOptimismMainnet()) {
                    return this.state.optimismIcon
                }

                if (isConnectedToArbitrumMainnet()) {
                    return this.state.arbitrumIcon
                }

                return null
            }
        }
    </script>

</settings>
