<order-list>
    <div class="order-list-title">{ this.i18next.t('my_order_list.title') }</div>
    <div class="filled-order-list">
        <div class="my-orders-line my-orders-header">
            <div>{ this.i18next.t('my_order_list.header.pair') }</div>
            <div class="order-list-big-screen-column">{ this.i18next.t('my_order_list.header.cost') }</div>
            <div>{ this.i18next.t('my_order_list.header.amount') }</div>
            <div>{ this.i18next.t('my_order_list.header.filled') }</div>
            <div>{ this.i18next.t('order.price') }</div>
            <div class="order-list-big-screen-column">{ this.i18next.t('my_order_list.header.expires_in') }</div>
            <div class="order-list-big-screen-column">{ this.i18next.t('my_order_list.header.recipient') }</div>
        </div>
        <div class="order-list-canvas">
            <div class="empty-order-list" if={ state.isLoadingOrders }>
                <loader />
            </div>
            <order-line
                    if={ !state.isLoadingOrders }
                    each={ order in state.orders }
                    key={ order.metaData.orderHash }
                    order={ order }
            />
        </div>
    </div>

    <script>
        import './order_list.css'
        import Loader from '../../loader/loader.riot'
        import OrderLine from './order_line/order_line.riot'
        import {
            accountAddress,
            isWalletConnected,
            registerForWalletChanges
        } from "../../../common/wallet/wallet_manager";
        import {
            registerForUserOrderUpdates,
            synchronizeUserOrders,
            userOrders
        } from "../../../common/0x/0x_user_orders";
        import {registerForTokenListUpdate} from "../../../common/tokens/token_fetch";

        export default {
            components: {
                Loader,
                OrderLine
            },
            state: {
                orders: [],
                isLoadingOrders: true
            },
            onMounted() {
                registerForTokenListUpdate(this)
                registerForUserOrderUpdates(this)
                registerForWalletChanges(this)
                if (isWalletConnected()) {
                    synchronizeUserOrders(accountAddress())
                }
            },
            onTokenListUpdate() {
                this.update()
            },
            onWalletChanges() {
                this.update({orders: [], isLoadingOrders: true})
                if (isWalletConnected()) {
                    synchronizeUserOrders(accountAddress())
                }
            },
            async onUserOrderUpdates() {

                if (isWalletConnected()) {
                    this.state.orders = userOrders()
                } else {
                    this.state.orders = []
                }

                this.update({isLoadingOrders: false})
            }
        }

    </script>

</order-list>
