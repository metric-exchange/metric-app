<token-selection>

    <div
        id={ props.token.address.toLowerCase() }
        class="token-selection"
        onclick={ (e) => props.fetchTokenInfo() }>
        <img
            height="30"
            width="30"
            src="{ fetchTokenLogoURI(props.token) }"
            alt={ props.token.symbol }
            onerror={ changeLogoToDefault }
        >
        <div class="symbol">
            <div>{ props.token.symbol }</div>
            <div class="token-hiding-game-support" if={ props.token.hasHidingGame }>
                <svg width="15" height="15" viewBox="0 0 246 281" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M49 44H197V93H49V44Z
                     M49 137H197V281H49V137Z
                     M197 0H246V44H197V0Z
                     M49 93H98V137H49V93Z
                     M148 93H197V137H148V93Z
                     M0 0H49V44H0V0Z
                     M99 0H148V44H99V0Z" fill="#C4C4C4"/>
                </svg>
            </div>
        </div>
        <div class="balance" if={ isTokenInfoInitialized() }>{ safeRound() }</div>
        <div class="loader" if={ !isTokenInfoInitialized() }>
            <loader/>
        </div>
    </div>

    <script>

        import './index.css'
        import Loader from '../../../loader/index.riot'

        import {isWalletConnected} from "../../../../common/wallet/WalletManager";
        import {
            registerForTokenBalancesUpdate
        } from "../../../../common/tokens/token_fetch";
        import makeBlockie from 'ethereum-blockies-base64';

        export default {
            components: {
                Loader
            },
            onMounted() {
                registerForTokenBalancesUpdate(this)
            },
            onTokenBalancesUpdate(token) {
                if (token.address.toLowerCase() === this.props.token.address.toLowerCase()) {
                    this.update()
                }
            },
            safeRound() {
                return this.formatNumber(this.props.token.balance.toNumber(), 4)
            },
            fetchTokenLogoURI(token) {
                if (token.logoURI !== undefined) {
                    return token.logoURI
                } else {
                    return this.defaultTokenLogo()
                }
            },
            changeLogoToDefault(e) {
                e.target.setAttribute("src", this.defaultTokenLogo())
            },
            defaultTokenLogo() {
                return makeBlockie(this.props.token.address)
            },
            isTokenInfoInitialized() {
                return !isWalletConnected() || !isNaN(this.props.token.balance)
            }
        }
    </script>

</token-selection>
