<zrx-stake>

    <input type="text" oninput={ fillPoolId } placeholder="Input pool id, eg: 0x0000000000000000000000000000000000000000000000000000000000000001"/>
    <button onclick={ unstake } if={ correctUnstakePoolId() }>Unstake</button>
    <button onclick={ createPoolAndStake }>CreatePool</button>
    <button onclick={ getPoolStats }>PoolStats</button>
    <button onclick={ transferFees }>TransferFees</button>

    <script>
        import {IZeroExContract, StakingContract} from "@0x/contract-wrappers";
        import {accountAddress, connectWallet, getProvider, initWeb3} from "../../common/wallet/WalletManager";
        import {BigNumber} from "@0x/utils";
        import {Web3Wrapper} from "@0x/web3-wrapper";

        export default {
            config: {
                zrxStakingContract: '0xa26e80e7dea86279c6d778d702cc413e6cffa777',
                zrxProxyContract: '0xDef1C0ded9bec7F1a1670819833240f027b25EfF',
                nilPool: '0x0000000000000000000000000000000000000000000000000000000000000000'
            },
            state: {
                unstakePoolId: undefined
            },
            async onMounted() {
                await connectWallet(false);
            },
            correctUnstakePoolId() {
                let reg = new RegExp("0x[0-9a-zA-Z]{64}")
                return this.state.unstakePoolId !== undefined && this.state.unstakePoolId.match(reg)
            },
            fillPoolId(e) {
                this.update( { unstakePoolId : e.target.value } )
            },
            async unstake() {
                const stakingContract =
                    new StakingContract(this.config.zrxStakingContract, getProvider(), { from: accountAddress() });

                const stakeAmount = Web3Wrapper.toBaseUnitAmount(new BigNumber(100), 18);

                const moveStakeReceipt = await stakingContract.moveStake(
                    { status: 1, poolId: this.state.unstakePoolId },
                    { status: 0, poolId: this.config.nilPool },
                    stakeAmount,
                ).awaitTransactionSuccessAsync(
                    { from: accountAddress() }
                );

                await stakingContract.unstake(stakeAmount).awaitTransactionSuccessAsync(
                    { from: accountAddress() }
                )

            },

            async createPoolAndStake() {
                const stakingContract =
                    new StakingContract(this.config.zrxStakingContract, getProvider(), { from: accountAddress() });

                const stakingPoolReceipt = await stakingContract.createStakingPool(
                    new BigNumber(1000000),
                    true
                ).awaitTransactionSuccessAsync(
                    {
                        from: accountAddress()
                    }
                )

                const createStakingPoolLog = stakingPoolReceipt.logs[0];
                const poolId = createStakingPoolLog.args.poolId;

                const stakeAmount = Web3Wrapper.toBaseUnitAmount(new BigNumber(100), 18);

                const stakeReceipt = await stakingContract.stake(stakeAmount)
                    .awaitTransactionSuccessAsync({ from: accountAddress() });

                const moveStakeReceipt = await stakingContract.moveStake(
                    { status: 0, poolId: this.config.nilPool },
                    { status: 1, poolId: poolId },
                    stakeAmount
                ).awaitTransactionSuccessAsync(
                    { from: accountAddress() }
                );

                console.log('create pool', poolId)
            },

            async getPoolStats() {
                const stakingContract =
                    new StakingContract(this.config.zrxStakingContract, getProvider(), { from: accountAddress() });

                const poolStats = await stakingContract.getStakingPoolStatsThisEpoch(
                    "0x0000000000000000000000000000000000000000000000000000000000000037"
                ).callAsync();

                console.log(
                    poolStats.feesCollected.dividedBy(1e18).toString(10),
                    poolStats.weightedStake.dividedBy(1e18).toString(10),
                    poolStats.membersStake.dividedBy(1e18).toString(10),
                )
            },

            async transferFees() {
                const exchangeContract =
                    new IZeroExContract(this.config.zrxProxyContract, getProvider(), { from: accountAddress() });

                await exchangeContract.transferProtocolFeesForPools([
                    "0x0000000000000000000000000000000000000000000000000000000000000037"
                    ]
                ).awaitTransactionSuccessAsync(
                    { from: accountAddress() }
                );
            }

        }
    </script>

</zrx-stake>