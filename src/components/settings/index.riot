<settings>

    <div class="identicon">
        <a if={ this.isWalletConnected() }
           class="identicon-address"
           href="https://etherscan.io/address/{ this.accountAddress() }"
           target="_blank">
            <span>{ state.accountDisplay }</span>
        </a>
        <div id="identicon-image" class="identicon-menu" onclick={ toggleDropDown }>
            <img
                    class="identicon-image"
                    src={ state.blocky }
                    height="25"
                    width="25"
                    alt="blocky"
            />
            <svg width="8" height="10" viewBox="0 0 289 142" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M8 8L147 134L281 8" stroke="black" stroke-width="30" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
            <img class="network-icon" src={ this.networkIcon() } height="15" width="15" if={ this.isWalletConnected() }/>
        </div>

    </div>

    <div style={ isClicked() ? "display:block" : 'display:none'} >
        <div class="dropdown-content" id="settings-dropdown">
            <div if={ this.isWalletConnected() }
                 class="wallet-switch"
                 onclick={ this.switchWallet }
            >
                { this.i18next.t('wallet.change_wallet') }
            </div>
            <language-selector/>
            <theme-switch/>
        </div>
    </div>

    <script>
        import './index.css'
        import ThemeSwitch from '../themeSwitch/index.riot'
        import LanguageSelector from '../languageSelector/index.riot'
        import EthIcon from '../../common/tokens/eth.png'
        import BscIcon from '../../common/tokens/bnb.png'
        import {
            accountAddress,
            obfuscateAddress,
            registerForWalletChanges, tryFormatWalletName
        } from "../../common/wallet/wallet_manager";
        import makeBlockie from 'ethereum-blockies-base64';
        import {isConnectedToBscMainNet, isConnectedToEthereumMainNet} from "../../common/ChainHelpers";

        let DEFAULT_ADDRESS = "0x0000000000000000000000000000000000000000"

        export default {
            components: {
                ThemeSwitch,
                LanguageSelector
            },
            state: {
                icon: Image,
                ethIcon: EthIcon,
                bscIcon: BscIcon,
                dropDownClicked: false,
                address: DEFAULT_ADDRESS,
                accountDisplay: null,
                blocky: null
            },
            onWalletChanges() {
                this.handleAccounts()
            },
            onMounted() {
                this.handleAccounts()
                registerForWalletChanges(this)
                document.addEventListener('click', function (e) {
                    var dropdown = document.getElementById('settings-dropdown');
                    var icon = document.getElementById('identicon-image');
                    
                    if (!icon.contains(e.target) && this.isClicked() && !dropdown.contains(e.target)) {
                        this.toggleDropDown();
                    }
                }.bind(this));
            },
            isClicked() {
                return this.state.dropDownClicked
            },
            toggleDropDown() {
                this.state.dropDownClicked = !this.state.dropDownClicked
                this.update()
            },
            async handleAccounts() {
                if (accountAddress() !== undefined) {
                    this.state.address = accountAddress()
                    this.state.accountDisplay = obfuscateAddress(this.state.address)
                } else {
                    this.state.address = DEFAULT_ADDRESS
                    this.state.accountDisplay = null
                }

                this.state.blocky = makeBlockie(this.state.address)
                this.update()

                if (accountAddress() !== undefined && this.isConnectedToEthereumMainNet()) {
                    this.state.accountDisplay = await tryFormatWalletName(this.state.address)
                    this.update()
                }
            },
            networkIcon() {
                if (isConnectedToEthereumMainNet()) {
                    return this.state.ethIcon
                }

                if (isConnectedToBscMainNet()) {
                    return this.state.bscIcon
                }

                return null
            }
        }
    </script>

</settings>
