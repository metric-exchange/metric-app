<order-form>
    <div class="order-form-loader" if={ state.isLoadingTokens }>
        <loader/>
    </div>
    <div id="order-form" if={ !state.isLoadingTokens }>
    
        <div class="order-line order-inputs">
           <div class="token-selector button clickable" onclick={ openInputTokenSelector }>{ state.inputToken.symbol } ˅</div>
           <div class="token-selector button clickable" onclick={ openOutputTokenSelector }>{ state.outputToken.symbol } ˅</div>
        </div>

        <div class="order-line order-buttons">
            <div id="buy-button" class="buy-button button clickable active-button" onclick={ setBuyOrderTypeAndRefresh }>{ this.i18next.t('order.type.buy') }</div>
            <div id="sell-button" class="sell-button button clickable" onclick={ setSellOrderTypeAndRefresh }>{ this.i18next.t('order.type.sell') }</div>
        </div>

        <div class="order-line order-param-values">
            <div>{ this.i18next.t('order.amount_simple') }</div>
            <div id="input-balance-amount" class="wallet-amount">{ this.i18next.t('wallet.balance', {balance: formatWalletBalance(state.inputToken.balance)}) }</div>
        </div>
        <div class="order-line order-input">
            <input type="number" id="order-amount-input" onkeyup={ updateAmount } placeholder="0"/>
            <label>{ state.inputToken.symbol }</label>
        </div>

        <div class="order-line order-param-values">
            <div>{ this.i18next.t('order.price') }</div>
            <div class="wallet-amount">{ this.i18next.t('wallet.balance', {balance: formatWalletBalance(state.outputToken.balance)}) }</div>
        </div>
        <div class="order-line order-input">
            <input id="order-price-input" type="number" onkeyup={ updatePrice } placeholder="0"/>
            <label>{ state.outputToken.symbol }</label>
        </div>

        <div class="order-line order-info">
            <div>{ this.i18next.t('order.fee') }</div>
            <label>{ formattedFeeAmount() } { state.outputToken.symbol }</label>
        </div>
        <div class="order-line order-info">
            <div>{ this.i18next.t('order.you_get') }</div>
            <label>{ formattedTotalAmount() } { state.outputToken.symbol }</label>
        </div>

        <div id ="place-order-button" class="order-line button">
            { state.submitMessage }
        </div>

        <div id="token-selector-box" style="display:none" }>
            <token-selector
                    closeTokenSelector={ closeTokenSelector }
                    selectToken={ selectToken }
            />
        </div>
    </div>

    <script>

        import './order_form.css'
        import TokenSelector from '../../token_selector/token_selector.riot'
        import Loader from '../../loader/loader.riot'
        import {
            registerForTokenAllowancesUpdate,
            registerForTokenBalancesUpdate, registerForTokenListUpdate,
            tokensList
        } from "../../../common/token_fetch";
        import {
            setBaseToken,
            setQuoteToken
        } from "../../../common/0x_order_book_proxy";
        import {ZeroXOrdersProxy} from "../../../common/0x_orders_proxy";
        import { BigNumber } from '@0x/utils';
        import {calculateMetricFee, MetricReferralAddress} from "../../../common/metric_fee";
        import { router } from '@riotjs/route'
        import {registerForOrderPriceUpdates} from "../../../common/prices/OrderPriceManager";

        let buyOrderType = "BUY"
        let sellOrderType = "SELL"

        export default {
            components: {
                TokenSelector,
                Loader
            },
            state: {
                inputToken: null,
                outputToken: null,
                amount: NaN,
                price: NaN,
                isOutputTokenApproved: false,
                isInputTokenApproved: false,
                showTokenSelector: false,
                isLoadingTokens: true,
                orderType: buyOrderType
            },
            onBeforeMount() {
                this.updateTokens()
                this.setOrderMessage()
            },
            async onMounted() {
                registerForTokenAllowancesUpdate(this)
                registerForTokenBalancesUpdate(this)
                registerForOrderPriceUpdates(this)
                if (!this.state.isLoadingTokens) {
                    await this.refreshOrderMessage()
                }
            },
            onBeforeUpdate() {
                if (this.state.inputToken === null || this.state.outputToken === null) {
                    this.updateTokens()
                    this.setOrderMessage()
                    router.push(`/#/${this.state.inputToken.address}/${this.state.outputToken.address}`)
                }
            },
            updateTokens() {
                if (this.props.inputTokenAddress !== undefined && this.props.inputTokenAddress !== null) {

                    let tokenFromRoute =
                        tokensList().find(t => t.address.toLowerCase() === this.props.inputTokenAddress.toLowerCase())

                    if (tokenFromRoute !== undefined && tokenFromRoute !== null) {
                        this.state.inputToken = tokenFromRoute
                        setBaseToken(this.state.inputToken)
                    }
                }

                if (this.props.outputTokenAddress !== undefined && this.props.outputTokenAddress !== null) {
                    let tokenFromRoute =
                        tokensList().find(t => t.address.toLowerCase() === this.props.outputTokenAddress.toLowerCase())

                    if (tokenFromRoute !== undefined && tokenFromRoute !== null) {
                        this.state.outputToken = tokenFromRoute
                        setQuoteToken(this.state.outputToken)
                    }
                }
                if (this.state.inputToken !== null && this.state.outputToken !== null) {
                    this.state.isLoadingTokens = false
                }
            },
            onOrderPriceUpdate(price) {
                this.state.price = price
                document.getElementById("order-price-input").value = price
                this.updateSubmitButtonState()
                this.refreshOrderMessage()
            },
            listenToSelectorCloseClick(e) {
                if(this.state.showTokenSelector) {
                    let selector = document.getElementById('token-selector-box');
                    let formSelector = document.getElementById('order-form');

                    if (selector !== null && !selector.contains(e.target) &&
                        formSelector !== null && !formSelector.contains(e.target)) {
                        this.closeTokenSelector();
                    }
                }
            },
            onTokenAllowancesUpdate() {
                this.refreshOrderMessage()
            },
            onTokenBalancesUpdate() {
                this.refreshOrderMessage()
            },
            closeTokenSelector() {
                this.state.showTokenSelector = false
                document.getElementById("token-selector-box").style.display = "none"
                document.removeEventListener('click', this.listenToSelectorCloseClick)
            },
            openInputTokenSelector() {
                this.state.selectionType = "input"
                this.openTokenSelector()
            },
            openOutputTokenSelector() {
                this.state.selectionType = "output"
                this.openTokenSelector()
            },
            openTokenSelector() {
                document.addEventListener('click', this.listenToSelectorCloseClick)
                document.getElementById("token-selector-box").style.display = "block"
                document.getElementById("token-selector-input-text").focus()
                this.state.showTokenSelector = true
            },
            async selectToken(token) {
                if (this.state.selectionType === "input") {
                    await setBaseToken(token)
                    this.state.inputToken = token
                } else {
                    await setQuoteToken(token)
                    this.state.outputToken = token
                }

                router.push(`/#/${this.state.inputToken.address}/${this.state.outputToken.address}`)

                this.refreshOrderMessage()

                this.closeTokenSelector()
            },
            updateAmount(e) {
                this.update({ amount: parseFloat(e.target.value) })
                this.updateSubmitButtonState()
                this.refreshOrderMessage()
            },
            updatePrice(e) {
                this.update({ price: parseFloat(e.target.value) })
                this.updateSubmitButtonState()
                this.refreshOrderMessage()
            },
            updateSubmitButtonState() {
                let button = document.getElementById("place-order-button")
                if (!this.isValidOrder() || !this.isSufficientBalance()) {
                    button.classList.remove("active-button")
                    button.classList.remove("clickable")
                    button.onclick = null
                } else if (this.isValidOrder() && !button.classList.contains("active-button")) {
                    button.classList.add("active-button")
                    button.classList.add("clickable")
                    button.onclick = this.checkApprovalAndSubmitOrder
                }
            },
            async setBuyOrderTypeAndRefresh() {
                await this.setBuyOrderType()
                this.refreshOrderMessage()
            },
            async setBuyOrderType() {
                this.state.orderType = buyOrderType
                document.getElementById("sell-button").classList.remove("active-button")
                document.getElementById("buy-button").classList.remove("active-button")
                document.getElementById("buy-button").classList.add("active-button")
                this.updateSubmitButtonState()
                this.removeInputAmountClickableState()
            },
            async setSellOrderTypeAndRefresh() {
                this.state.orderType = sellOrderType
                document.getElementById("sell-button").classList.remove("active-button")
                document.getElementById("buy-button").classList.remove("active-button")
                document.getElementById("sell-button").classList.add("active-button")
                this.updateSubmitButtonState()
                this.refreshOrderMessage()
                this.addInputAmountClickableState()
            },
            addInputAmountClickableState() {
                let element = document.getElementById("input-balance-amount")
                element.classList.add("clickable")
                element.onclick = this.setMaxInputAmount
            },
            removeInputAmountClickableState() {
                let element = document.getElementById("input-balance-amount")
                element.classList.remove("clickable")
                element.onclick = null
            },
            setMaxInputAmount() {
                this.update({ amount: this.state.inputToken.balance })
                this.updateSubmitButtonState()
                this.refreshOrderMessage()
                document.getElementById("order-amount-input").value = this.state.inputToken.balance
            },
            async checkApprovalAndSubmitOrder() {
                if (await this.isApproved()) {
                    await this.sendOrder()
                } else {
                    await this.requestApprovalAndSubmitOrder()
                }
                this.refreshOrderMessage()
            },
            async requestApprovalAndSubmitOrder() {
                if (this.isBuyOrder()) {
                    await this.sendApprovalForTokenAndSubmitOrder(this.state.outputToken)
                } else {
                    await this.sendApprovalForTokenAndSubmitOrder(this.state.inputToken)
                }
            },
            async sendApprovalForTokenAndSubmitOrder(token) {
                this.setApprovalMessage(token)
                await ZeroXOrdersProxy.approveZeroXAllowance(
                    token.address,
                    (a, b) => {
                        this.refreshOrderMessage()
                    },
                    (e) => {
                        this.refreshOrderMessage()
                    }
                )
            },
            async sendOrder() {
                await ZeroXOrdersProxy.submitOrder(
                    this.buildOrder(),
                    MetricReferralAddress,
                    calculateMetricFee()
                )
            },
            buildOrder() {
                let inputAmount = this.inputAmount() * (10 ** this.state.inputToken.decimals)
                let outputAmount = this.outputAmount() * (10 ** this.state.outputToken.decimals)

                if (this.isSellOrder()) {
                    return {
                        makerAssetAmount: new BigNumber(inputAmount),
                        makerAssetAddress: this.state.inputToken.address,
                        takerAssetAmount: new BigNumber(outputAmount),
                        takerAssetAddress: this.state.outputToken.address
                    }
                } else {
                    return {
                        makerAssetAmount: new BigNumber(outputAmount),
                        makerAssetAddress: this.state.outputToken.address,
                        takerAssetAmount: new BigNumber(inputAmount),
                        takerAssetAddress: this.state.inputToken.address
                    }
                }
            },
            inputAmount() {
                return this.state.amount
            },
            outputAmount() {
                let amount = this.inputAmount()
                return (isNaN(amount) ? 0 : amount) * (isNaN(this.state.price) ? 0 : this.state.price)
            },
            formattedTotalAmount() {
                return ((this.outputAmount() - this.feeAmount())).toFixed(3)
            },
            formattedFeeAmount() {
                return this.feeAmount().toFixed(3)
            },
            feeAmount() {
                let amount = this.outputAmount()
                return this.applyFee((isNaN(amount) ? 0 : amount))
            },
            applyFee(amount) {
                return amount * calculateMetricFee()
            },
            isBuyOrder() {
                return this.state.orderType === buyOrderType
            },
            isSellOrder() {
                return this.state.orderType === sellOrderType
            },
            async isApproved() {
                if (this.isBuyOrder()) {
                    return await ZeroXOrdersProxy.is0xApprovedForToken(this.state.outputToken.address, this.outputAmount() * (10 ** this.state.outputToken.decimals))
                } else {
                    return await ZeroXOrdersProxy.is0xApprovedForToken(this.state.inputToken.address, this.inputAmount() * (10 ** this.state.inputToken.decimals))
                }
            },
            setApprovalMessage(token) {
                this.update({submitMessage: this.i18next.t("submit.approving", {token: token})})
            },
            setOrderMessage() {
                if (!this.isValidInputs()) {
                    this.state.submitMessage = this.i18next.t("submit.place_order")
                } else if (!this.isValidOrder()) {
                    this.state.submitMessage = this.i18next.t("submit.must_be_greater_than", {token: this.state.outputToken})
                } else if (!this.isSufficientBalance()) {
                    this.state.submitMessage = this.i18next.t("submit.insufficient_balance")
                } else if(!this.maybeIsApproved()) {
                    if (this.isBuyOrder()) {
                        this.state.submitMessage = this.i18next.t("submit.approve", {token: this.state.outputToken})
                    }else {
                        this.state.submitMessage = this.i18next.t("submit.approve", {token: this.state.inputToken})
                    }
                } else {
                    this.state.submitMessage = this.i18next.t("submit.place_order")
                }
            },
            refreshOrderMessage() {
                this.setOrderMessage()
                this.update()
            },
            maybeIsApproved() {
                if (this.isBuyOrder()) {
                    return tokensList().find(t => t.symbol === this.state.outputToken.symbol).allowance >= this.outputAmount()
                } else {
                    return tokensList().find(t => t.symbol === this.state.inputToken.symbol).allowance >= this.inputAmount()
                }
            },
            isValidOrder() {
                let isAmountAboveThreshold = (this.outputAmount() > this.state.outputToken.volume_limit)
                return this.isValidInputs() && isAmountAboveThreshold
            },
            isValidInputs() {
                return !isNaN(this.state.price) && !isNaN(this.state.amount)
            },
            isSufficientBalance() {
                let balance = 0
                let amount = 0
                if (this.isBuyOrder()) {
                    balance = tokensList().find(t => t.symbol === this.state.outputToken.symbol).balance
                    amount = this.outputAmount()
                } else {
                    balance = tokensList().find(t => t.symbol === this.state.inputToken.symbol).balance
                    amount = this.inputAmount()
                }

                return balance >= amount
            },
            formatWalletBalance(amount) {
                return new BigNumber(amount).toFixed(3, BigNumber.ROUND_DOWN)
            }
        }

    </script>

</order-form>
