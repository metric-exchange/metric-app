
<order-line>

    <div class="my-orders my-orders-line" if={ state.makerToken !== undefined && state.takerToken !== undefined }>
        <div class="order-pair">
            <div>{ state.makerToken.symbol }</div>
            <div>&#8594;</div>
            <div>{ state.takerToken.symbol }</div>
        </div>
        <div class="order-list-big-screen-column ask">{ makerTotalAmount(props.order).toFixed(3) }</div>
        <div class="bid">{ takerAmount(props.order).toFixed(3) }</div>
        <div>{ filledTakerPercentage(props.order).toFixed(2) }%</div>
        <div>{ orderPrice(props.order).toFixed(3) }</div>
        <div class="order-list-big-screen-column">{ getDateDiff(props.order.order.expirationTimeSeconds) }</div>
        <div class="order-list-big-screen-column">
            <a class="order-recipient"
                href="https://etherscan.io/address/{ props.order.order.takerAddress }"
                target="_blank">
                { takerAddress() }
            </a>
        </div>
        <div class="cancel-order">
            <img src={ config.closeImage } onclick={ this.cancelOrder } alt={ this.i18next.t('order.cancel') }/>
        </div>
    </div>

    <script>
        import './order_line.css'
        import {tokensList} from "../../../../common/tokens/token_fetch";
        import {ZeroXOrdersProxy} from "../../../../common/0x/0x_orders_proxy";
        import moment from 'moment';
        import {supportedLanguages} from "../../../../common/localization/localize";
        import Image from '../../../token_selector/close.svg'

        export default {
            config: {
              closeImage: Image
            },
            state: {
                makerToken: undefined,
                takerToken: undefined,
                priceDirectionReverted: false
            },
            onBeforeMount() {
                this.initTokens()
            },
            onBeforeUpdate() {
                this.initTokens()
            },
            initTokens() {
                let prefixLen = "0xf47261b0000000000000000000000000".length
                let makerAddress = `0x${this.props.order.order.makerAssetData.substr(prefixLen)}`.toLowerCase()
                let takerAddress = `0x${this.props.order.order.takerAssetData.substr(prefixLen)}`.toLowerCase()
                this.state.makerToken = tokensList().find(t => t.address.toLowerCase() === makerAddress)
                this.state.takerToken = tokensList().find(t => t.address.toLowerCase() === takerAddress)
            },
            async cancelOrder() {
                await ZeroXOrdersProxy.cancelOrder(this.props.order)
            },
            makerTotalAmount(order) {
                return order.order.makerAssetAmount
                    .dividedBy(10**this.state.makerToken.decimals)
            },
            makerAmount(order) {
                return order.order.makerAssetAmount
                    .minus(order.order.makerFee)
                    .dividedBy(10**this.state.makerToken.decimals)
            },
            takerAmount(order) {
                return order.order.takerAssetAmount
                    .minus(order.order.takerFee)
                    .dividedBy(10**this.state.takerToken.decimals)
            },
            filledTakerPercentage(order) {
                let remaining = parseInt(order.metaData.remainingFillableTakerAssetAmount)
                return order.order.takerAssetAmount
                    .minus(remaining)
                    .multipliedBy(100)
                    .dividedBy(order.order.takerAssetAmount)
            },
            orderPrice(order) {
                if (this.state.priceDirectionReverted) {
                    return this.makerAmount(order) / this.takerAmount(order)
                } else {
                    return this.takerAmount(order) / this.makerAmount(order)
                }
            },
            revertPriceDirection() {
                this.update({priceDirectionReverted : !this.state.priceDirectionReverted})
            },
            priceCouple() {
                if (this.state.priceDirectionReverted) {
                    return `${this.state.takerToken.symbol}/${this.state.makerToken.symbol}`
                } else {
                    return `${this.state.makerToken.symbol}/${this.state.takerToken.symbol}`
                }
            },
            getDateDiff(timestampSeconds) {
                let langId = this.i18next.language
                let lang = supportedLanguages[langId]
                moment.locale(langId, { relativeTime: lang.translation.relativeTime});
                return moment(timestampSeconds * 1000).fromNow()
            },
            takerAddress() {
                let address = this.props.order.order.takerAddress
                if ( address === "0x0000000000000000000000000000000000000000") {
                    return null
                } else {
                    return address.substr(0, 4) + '...' + address.substr(38, 40)
                }
            }
        }
    </script>

</order-line>


